
group projectGroup
version projectVersion

apply plugin: 'java'

Properties env = new Properties()
env.load(new FileInputStream("env.properties"))
sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

testSets {
    integrationTest { dirName = 'integration-test' }
    functionalTest { dirName = 'functional-test' }
}

test.outputs.upToDateWhen {false}
integrationTest.outputs.upToDateWhen {false}
functionalTest.outputs.upToDateWhen {false}

sourceSets {
    functionalTest {
        java {
            srcDir 'src/main/java'
        }
    }
    integrationTest {
        java {
            srcDir 'src/main/java'
        }
    }
    main {
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
            includes = ["**/*.fxml", "**/*.xml", "**/*.properties", "**/*.css", "**/*.json", "**/*.sql",
                        "**/*.png", "**/*.gif", "**/*.jpg", "**/*.ico", "**/*.html", "**/*.js", "**/*.jrxml",
                        "**/*.pak", "**/*.dll","**/*.dat","**/*.bin","**/*.exe"]
        }
    }
}

bintray {
    user = bintrayUser
    key = env.getProperty("BINTRAY_APIKEY")
    publish = true
    pkg {
        repo = bintrayRepository
        name = projectArtifact
        desc = libDescription
        userOrg = bintrayUser
        licenses = ((String) projectLicenses).split(";")
        vcsUrl = libScm
        labels = ((String) projectTags).split(";")
        publicDownloadNumbers = true
        websiteUrl = libUrl
    }
    publications = ['libPublication']
}

publishing {
    publications {
        libPublication(MavenPublication) {
            from components.java
            groupId projectGroup
            artifactId projectArtifact
            version projectVersion
        }
    }
}


task publishLibBintray(dependsOn: ['clean', 'assemble', 'test', 'integrationTest', 'functionalTest']){
    assemble.mustRunAfter clean
    test.mustRunAfter assemble
    integrationTest.mustRunAfter test
    functionalTest.mustRunAfter integrationTest
   bintrayUpload.mustRunAfter functionalTest
}